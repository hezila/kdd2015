
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # ==============================================================================
> # LIBRARIES
> # ==============================================================================
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(readr)
> library(lubridate)
> library(magrittr)

Attaching package: ‘magrittr’

The following object is masked from ‘package:dplyr’:

    %>%

> library(ggplot2)
> library(ROCR)
Loading required package: gplots
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> library(stringr)
> 
> 
> # ==============================================================================
> # LOADING DATA
> # ==============================================================================
> 
> enroll_df <- read_csv("data/train/enrollment_train.csv")
> log_df <- read_csv("data/train/log_train.csv", col_types = list(time = col_character()))
|================================================================================| 100%  589 MB
> object_df <- read_csv("data/object.csv")
> label_df <- read_csv("data/train/truth_train.csv",
+                      col_names = c("enrollment_id", "dropout"))
> 
> 
> 
> # Don't have label for enroll id 139669. Remove it from data
> log_df %<>% filter(enrollment_id != 139669)
> enroll_df %<>% filter(enrollment_id != 139669)
> 
> # Add labels to enroll_df
> enroll_df <- inner_join(enroll_df, label_df)
Joining by: "enrollment_id"
> 
> # ==============================================================================
> # HELPER FUNCTIONS
> # ==============================================================================
> 
> # Create a function to compute the AUC
> calcAUC <- function(predcol, outcol) {
+     perf <- performance(prediction(predcol, outcol == 1), "auc")
+     as.numeric(perf@y.values)
+ }
> 
> # Create a function to make detail df
> create_detail <- function(log_df, object_df) {
+ 
+     # Format time column to make a POSIXct object
+     log_df %<>% mutate(time = ymd_hms(gsub("T", " ", time)),
+                        event_date = as.Date(time),
+                        access_date = event_date)
+ 
+     log_df[log_df$event != "access",]$access_date <- NA
+ 
+     object_df %<>% mutate(start = ymd_hms(gsub("T", " ", start)),
+                           module_release_dt = as.Date(start))
+     # Get number of children per module
+     object_df$num_children <- sapply(object_df$children,
+                                      function(x) length(str_split(x, " ")[[1]]))
+ 
+     # Change spelling error nagivate to navigate!
+     log_df[log_df$event == "nagivate",]$event = "navigate"
+ 
+     # Get course start and end date for each course
+     log_df %<>%
+         group_by(course_id) %>%
+         summarise(course_strt_dt = as.Date(min(time)),
+                   course_end_dt = as.Date(max(time))) %>%
+         inner_join(log_df, .)
+ 
+     # Join log_df to object_df
+     detail_df <- left_join(log_df, object_df, by = c("course_id" = "course_id",
+                                                      "object" = "module_id"))
+ }
> 
> # Create a function to make some summary features
> create_summary <- function(df) {
+     summary_df <-
+         df %>%
+         group_by(enrollment_id, username, course_id) %>%
+         summarise(num_videos = sum(ifelse(event == "video", 1, 0)),
+                   num_navigate = sum(ifelse(event == "navigate", 1, 0)),
+                   num_access = sum(ifelse(event == "access", 1, 0)),
+                   num_problem = sum(ifelse(event == "problem", 1, 0)),
+                   num_page_close = sum(ifelse(event == "page_close", 1, 0)),
+                   num_discussion = sum(ifelse(event == "discussion", 1, 0)),
+                   num_wiki = sum(ifelse(event == "wiki", 1, 0)),
+                   num_events = n(),
+                   lst_wk_strt_date = max(course_end_dt) - 7,
+                   lst_2wk_strt_date = max(course_end_dt) - 14,
+                   num_events_lst_wk = sum(
+                       ifelse(event_date >= lst_wk_strt_date,
+                              1, 0)),
+                   num_access_lst_wk = sum(
+                       ifelse(event_date >= lst_wk_strt_date & event == "access",
+                              1, 0)),
+                   num_access_lst2_wk = sum(
+                       ifelse(event_date >= lst_2wk_strt_date & event == "access",
+                              1, 0)),
+                   days_course_strt_access1 = as.numeric(
+                       min(access_date, na.rm = T) - max(course_strt_dt)),
+                   days_course_end_access_lst = as.numeric(
+                       max(course_end_dt) - max(access_date, na.rm = T)),
+ 
+                   unique_days_accessed = n_distinct(event_date)
+         ) %>%
+         ungroup
+ 
+     # Get features at module level like the median days between a module release
+     # and the first access by user
+     summary_df <-
+         detail_df %>%
+         group_by(enrollment_id, username, course_id, object) %>%
+         summarise(days_acs1_mod_rls = as.numeric(
+             min(access_date, na.rm = T) - max(module_release_dt, na.rm = T)),
+             days_acslst_mod_rls = as.numeric(
+                 max(access_date, na.rm = T) - max(module_release_dt,
+                                                   na.rm = T))) %>%
+         ungroup %>%
+         group_by(enrollment_id, username, course_id) %>%
+         summarise(median_days_acs1_mod_rls = median(days_acs1_mod_rls,
+                                                     na.rm = T),
+                   median_days_acslst_mod_rls = median(days_acslst_mod_rls,
+                                                       na.rm = T)) %>%
+         ungroup %>%
+         left_join(summary_df, .)
+ 
+     # Replace NAs by 9999
+     summary_df[is.na(summary_df)] <- 9999
+ 
+     summary_df
+ }
> 
> 
> # ==============================================================================
> # TRAIN TEST SPLIT
> # ==============================================================================
> 
> # Create detail df
> detail_df <- create_detail(log_df, object_df)
Error: index out of bounds
In addition: Warning message:
 24925 failed to parse. 
Execution halted
