install.packages("coin")
install.packages("ggplot2")
0.24 * 6 * 2.37
eps
exit
quit()
b <- c(162)
b <- c(162,170,184,164,172,176,159,170)
b.summary()
summary(b)
a <- c(168,136,147,159,13,161,143,145)
summary(a)
a <- c(168,136,147,159,143,161,143,145)
summary(a)
t.test(a,b,paired=TRUE)
write_csv(submit_df, "submission_dtree.csv",
source('~/Dropbox/kddcup2015/KDD_Analysis.R')
;
pred <- predict(tree.model, newdata = summary_test_df)
install.packages("dplyr")
install.packages("readr")
install.packages("readr")
install.packages("lubridate")
install.packages("ROCR")
install.packages("stringr")
install.packages("ggplot2")
install.packages("magrittr")
library(ROCR)
install.packages("ggplot2")
library(ROCR)
library(stringr)
# ==============================================================================
# LOADING DATA
# ==============================================================================
enroll_df <- read_csv("data/train/enrollment_train.csv")
log_df <- read_csv("data/train/log_train.csv", col_types = list(time = col_character()))
object_df <- read_csv("data/object.csv")
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
label_df <- read_csv("data/train/truth_train.csv",
source('~/Dropbox/kddcup2015/r/stacking.R')
source('~/Dropbox/kddcup2015/r/stacking.R')
nround
train.predict = predict(train.fit.glm, train.feature, type='response')
train.predict.b = as.numeric(train.predict > 0.5)
table(train.predict.b, train.truth$dropout)
train.predict = predict(train.fit.xgb, as.matrix(train.feature.stacking))
train.predict.b = as.numeric(train.predict > 0.5)
table(train.predict.b, train.truth$dropout)
train.predict = predict(train.fit, as.matrix(train.feature.stacking))
train.predict.b = as.numeric(train.predict > 0.5)
table(train.predict.b, train.truth$dropout)
source('~/Dropbox/kddcup2015/r/stacking.R')
source('~/Dropbox/kddcup2015/r/stacking.R')
source('~/Dropbox/kddcup2015/r/stacking.R')
source('~/Dropbox/kddcup2015/r/stacking.R')
nround
train.predict = predict(train.fit.glm, train.feature, type='response')
train.predict.b = as.numeric(train.predict > 0.5)
table(train.predict.b, train.truth$dropout)
train.predict = predict(train.fit.xgb, as.matrix(train.feature.stacking))
train.predict.b = as.numeric(train.predict > 0.5)
table(train.predict.b, train.truth$dropout)
source('~/Dropbox/kddcup2015/r/stacking.R')
train.feature$year_2013
summary(train.feature$year_2013)
summary(train.feature$year_2014)
summary(train.feature$year_2014==0.7311)
summary(train.feature$year_2014>0.5)
summary(train.feature$year_2013>0.5)
train.feature$video_over10minutes_count
source('~/Dropbox/kddcup2015/r/stacking.R')
train.feature = fread('../data/train_simple_feature.csv')
train.feature = fread('../data/train_simple_feature.csv')
summary(train.feature)
source('~/Dropbox/kddcup2015/r/stacking.R')
summary(train.feature)
train.feature = fread('../data/test_course_feature.csv')
summary(train.feature)
train.feature = fread('../data/train_course_feature.csv')
train.truth = fread('../data/truth_train.csv')
train.truth = train.truth[1:nrow(train.truth),]
#train.feature$fst_day <- NULL
#train.feature$lst_day <- NULL
eids = train.feature$enrollment_id
train.feature$enrollment_id <- NULL
#train.feature = 1/(1+exp(-sqrt(train.feature)))
train.feature = log(1 + train.feature)
train.feature$enrollment_id = eids
summary(train.feature)
summary(train.dataset)
eids = train.feature$enrollment_id
train.feature$enrollment_id <- NULL
#train.feature = 1/(1+exp(-sqrt(train.feature)))
train.feature = log(1 + train.feature)
train.feature$enrollment_id = eids
setnames(train.truth, colnames(train.truth), c('enrollment_id', 'dropout'))
train.dataset = merge(train.feature, train.truth, by='enrollment_id')
train.dataset$enrollment_id <- NULL
## test data
#test.feature = fread('../data/test_enrollment_feature.csv')
#test.feature$enrollment_id <- NULL
#test.feature$fst_day <- NULL
#test.feature$lst_day <- NULL
# cl <- cut(train.dataset$active_days, breaks=c(0, 1, 2, 7, 14, 20, 29))
# cl <- cut(train.dataset$active_days, breaks=c(0, 3, 7, 14, 29))
## sample weights
train.sumpos = sum(train.dataset$dropout == 1.0)
train.sumneg = sum(train.dataset$dropout == 0.0)
ratio = train.sumpos / train.sumneg + 3.0
train.weights = ifelse(train.dataset$dropout==0, ratio, 1)
train.dataset$user_drop_ratio <- NULL
# glm
t = proc.time()
train.fit.glm = glm(dropout~., data=train.dataset,
family=binomial(logit), weights=train.weights)
proc.time()-t
fitpreds = predict(train.fit.glm, train.feature, type="response")
fitpred = prediction(fitpreds, train.dataset$dropout)
fitperf = performance(fitpred,"tpr","fpr")
# I know, the following code is bizarre. Just go with it.
auc <- performance(fitpred, measure = "auc")
auc <- auc@y.values[[1]]
plot(fitperf,col="green",lwd=2,main="ROC Curve for Logistic")
abline(a=0,b=1,lwd=2,lty=2,col="gray")
# create stacking data
auc
train.predict.glm = predict(train.fit.glm, train.feature, type='response')
train.feature.stacking = cbind(train.feature, train.predict.glm)
# xgboost
param = list('objective'= 'binary:logistic',
'scale_pos_weight'=ratio,
'bst:eta'=0.1,
'bst:max_depth'=8,
'eval_metric'='auc',
'silent' = 1,
'nthread' = 16)
train.cv = xgb.cv(param=param,
as.matrix(train.feature.stacking),
label=train.truth$dropout,
nfold=round(1+log2(nrow(train.feature.stacking))),
nrounds=100)
train.feature$user_drop_ratio <- NULL
# glm
t = proc.time()
train.fit.glm = glm(dropout~., data=train.dataset,
family=binomial(logit), weights=train.weights)
proc.time()-t
fitpreds = predict(train.fit.glm, train.feature, type="response")
fitpred = prediction(fitpreds, train.dataset$dropout)
fitperf = performance(fitpred,"tpr","fpr")
# I know, the following code is bizarre. Just go with it.
auc <- performance(fitpred, measure = "auc")
auc <- auc@y.values[[1]]
plot(fitperf,col="green",lwd=2,main="ROC Curve for Logistic")
abline(a=0,b=1,lwd=2,lty=2,col="gray")
# create stacking data
train.feature.stacking = cbind(train.feature, train.predict.glm)
train.predict.glm = predict(train.fit.glm, train.feature, type='response')
'scale_pos_weight'=ratio,
param = list('objective'= 'binary:logistic',
# xgboost
'bst:eta'=0.1,
'bst:max_depth'=8,
'eval_metric'='auc',
'silent' = 1,
'nthread' = 16)
train.cv = xgb.cv(param=param,
as.matrix(train.feature.stacking),
label=train.truth$dropout,
nfold=round(1+log2(nrow(train.feature.stacking))),
nrounds=100)
source('~/Dropbox/kddcup2015/r/tsne.R')
plot(p)
source('~/Dropbox/kddcup2015/r/stacking.R')
# load data
## train data
train.feature = fread('../data/train_simple_feature.csv')
train.truth = fread('../data/truth_train.csv')
train.truth = train.truth[1:nrow(train.truth),]
#train.feature$fst_day <- NULL
#train.feature$lst_day <- NULL
eids = train.feature$enrollment_id
train.feature$enrollment_id <- NULL
#train.feature = 1/(1+exp(-sqrt(train.feature)))
train.feature = log(1 + train.feature)
train.feature$enrollment_id = eids
setnames(train.truth, colnames(train.truth), c('enrollment_id', 'dropout'))
train.dataset = merge(train.feature, train.truth, by='enrollment_id')
train.dataset$enrollment_id <- NULL
train.feature$`sumlag<1week`
# load data
## train data
train.feature = fread('../data/train_simple_feature.csv')
train.truth = fread('../data/truth_train.csv')
train.truth = train.truth[1:nrow(train.truth),]
#train.feature$fst_day <- NULL
#train.feature$lst_day <- NULL
eids = train.feature$enrollment_id
train.feature$enrollment_id <- NULL
#train.feature = 1/(1+exp(-sqrt(train.feature)))
#train.feature = log(1 + train.feature)
train.feature$enrollment_id = eids
setnames(train.truth, colnames(train.truth), c('enrollment_id', 'dropout'))
train.dataset = merge(train.feature, train.truth, by='enrollment_id')
train.dataset$enrollment_id <- NULL
train.feature$`sumlag<1week`
colnames(train.feature)
train.feature$`sumlag<1week`
train.feature$`sumlag<1week`[10]
train.feature$`sumlag<1week`[100]
train.feature$['sumlag<1week']
train.feature$c('sumlag<1week')
train.feature[c('sumlag<1week')]
